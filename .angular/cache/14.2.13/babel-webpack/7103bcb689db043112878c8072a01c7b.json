{"ast":null,"code":"import { interval } from \"rxjs\";\nimport { map, takeWhile } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let CountDownComponent = /*#__PURE__*/(() => {\n  class CountDownComponent {\n    constructor() {\n      this.startDate = new Date();\n      this._MS_PER_SECOND = 1000;\n    }\n\n    ngOnInit() {\n      this.della$ = this.getCountDownObervable(this.startDate, this.futureDate);\n      this.countDown$ = this.getCountDownObservable(this.startDate, this.futureDate);\n    }\n\n    getCountDownObservable(startDate, futureDate) {\n      return interval(1000).pipe(map(elapse => this.diffInSec(startDate, futureDate) - elapse), takeWhile(gap => gap >= 0), map(sec => ({\n        day: Math.floor(sec / 3600 / 24),\n        hour: Math.floor(sec / 3600 % 24),\n        minute: Math.floor(sec / 60 % 60),\n        second: Math.floor(sec % 60)\n      })), map(({\n        hour,\n        minute,\n        second\n      }) => `${hour}:${minute}:${second}`));\n    }\n\n    getCountDownObervable(startDate, futureDate) {\n      return interval(1000).pipe(map(elapse => this.diffInSec(startDate, futureDate) - elapse), takeWhile(gap => gap >= 0), map(sec => ({\n        day: Math.floor(sec / 3600 / 24),\n        hour: Math.floor(sec / 3600 % 24),\n        minute: Math.floor(sec / 60 % 60),\n        second: Math.floor(sec % 60)\n      })), map(({\n        hour,\n        minute,\n        second\n      }) => `${hour}:${minute}:${second}`));\n    }\n\n    diffInSec(start, future) {\n      const diff = future.getTime() - start.getTime();\n      return Math.floor(diff / this._MS_PER_SECOND);\n    }\n\n  }\n\n  CountDownComponent.ɵfac = function CountDownComponent_Factory(t) {\n    return new (t || CountDownComponent)();\n  };\n\n  CountDownComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountDownComponent,\n    selectors: [[\"app-count-down\"]],\n    inputs: {\n      startDate: \"startDate\",\n      futureDate: \"futureDate\"\n    },\n    decls: 3,\n    vars: 6,\n    template: function CountDownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵpipe(2, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵtextInterpolate2(\"222-\", i0.ɵɵpipeBind1(1, 2, ctx.countDown$), \" -111 \", i0.ɵɵpipeBind1(2, 4, ctx.della$), \"\\n\");\n      }\n    },\n    dependencies: [i1.AsyncPipe],\n    changeDetection: 0\n  });\n  return CountDownComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}